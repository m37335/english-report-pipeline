import json

class OutlineCreator:
    """
    検索結果を元に、レポートのアウトラインを生成するクラス。
    """
    def __init__(self):
        """
        プロンプトを初期化する。
        """
        self.prompt_template = """あなたは、最新の英語教育ニュースや研究を常にフォローしている英語教育の専門家です。収集された情報源をもとに、下記のクエリーに対する解説レポートとして適切なアウトラインと簡潔なタイトルを作成してください。結論パートは絶対に作成しないでください。

アウトラインは以下のMarkdownフォーマットに従って作成し、次のルールを厳守すること。
1. クエリーに対して、英語教育的な観点からの解説・分析を目的とした構成にする。
2. "# Title" をレポートのタイトルに用いる。
3. "## Title" を章のタイトルとして用いる。
   - 各章 ("## Title") に対して、必ず2～3個以上の節 ("### Title") を生成すること
   - 章の数はクエリーに応じて5～10個の間で作成すること。
4. "### Title" を節のタイトルとして用いる。
   - 各節には、収集された情報源をできるだけ多く含めるようにし、必ず最低3～5個以上の異なる引用番号を使用すること
   - 節同士で内容が類似しそうな場合、節を統合し、他の論点の節を追加すること
5. 引用情報の記載方法
   - 引用番号は節の次の行に記載すること。`### Title [3][4]` のように同じ行に記載してはならない
6. Markdownフォーマットに関するルール
   - "## 結論"という結論パートは絶対に作成してはいけない
   - 出力には "# Title", "## Title"、"### Title" などのMarkdown形式のタイトル以外のテキストを一切含めないこと
7. 各行はタイトル、セクション、サブセクション、引用番号のいずれかでそれ以外の情報を記載してはならない

【出力例】
    # レポートタイトル
    ## セクション1
    ### サブセクション1
    [4][67]
    ### サブセクション2
    [30][28][1][27][102]
    ## セクション2
    ### サブセクション1
    [14][25][9][96]
    ### サブセクション2
    [2][24][51]
    ### サブセクション3
    [29][11][4][56]
    ...

    【不適切な出力例】
    # レポートタイトル: xxx    // 「レポートタイトル: 」という修飾はNG
    ## セクション1
    ### サブセクション1 [4][67]    // 引用はサブセクションの行にはつけない
    [4][67]
    このサブセクションでは...    // 説明文など要求していない不要な行は削除
    ### サブセクション2 [30][28][1][27][102]    // 同上
    [30][28][1][27][102]
    ## セクション2
    [2][24][29][11][4]    // セクション自体に引用がついている
    ### サブセクション1
    ### サブセクション: yyy    // 「サブセクション: 」という修飾はNG
    [2][24][51]
    ### サブセクション3
    [29][11][4][156]     // （引用が例えば110までしかない場合）156は存在しない引用

【情報源】
{search_results_text}

【クエリー】
{refined_query}
"""

    def _format_search_results(self, search_results: dict[str, str]) -> str:
        """検索結果の辞書を番号付きリストの文字列にフォーマットする"""
        formatted_text = ""
        for i, (topic, result) in enumerate(search_results.items()):
            formatted_text += f"[{i+1}] Topic: {topic}\nResult: {result}\n\n"
        return formatted_text.strip()

    def create(self, refined_query: str, search_results: dict[str, str]) -> str:
        """
        洗練されたクエリと検索結果を元に、アウトラインを生成する。

        Args:
            refined_query: 洗練された検索クエリ
            search_results: Web検索結果

        Returns:
            Markdown形式のアウトライン
        """
        print(f"Creating outline for query: {refined_query}")

        # 現時点では仮実装として、固定のMarkdown文字列を返す
        mock_outline = (
            "# 現在完了進行形の包括的解説\n"
            "## 現在完了進行形の基本構造\n"
            "### have/has been + -ingの形成\n"
            "[1][3]\n"
            "### 主語との一致\n"
            "[2][4]\n"
            "## 「継続」のニュアンス\n"
            "### 過去から現在への連続性\n"
            "[1][5][7]\n"
            "### 動作の進行中である側面\n"
            "[2][6]\n"
            "## 期間の表現方法\n"
            "### forとsinceの使い分け\n"
            "[1][2][3]\n"
            "### How longを用いた疑問文\n"
            "[4][5][6]\n"
            "## 他の時制との比較\n"
            "### 現在完了形との意味的な違い\n"
            "[1][7]\n"
            "### 現在形・過去形との対比\n"
            "[2][3][4]"
        )

        print(f"Created outline:\n{mock_outline}")
        return mock_outline
